#!/usr/bin/env python

"""
Copyright (C) 2015 Louis Dijkstra

This file is part of gonl-sv

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function, division
from optparse import OptionParser
import os
import sys
import math
import vcf

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__))[:-3] + 'python')
from Variant import *

__author__ = "Louis Dijkstra"

usage = """%prog <haplotype-file> <gwas-catalogue>

Reads in a haplotype file <haplotype-file> as generated by 
'extract-haplotypes.py' and annotates every SNP in the file 
that is a hit SNP with its hit allele. 
"""

def main():
	parser = OptionParser(usage=usage)
	parser.add_option("--hit-snps", action="store_true", dest="hit_snps", default=False, 
				  		help="Only outputs hit SNPs")
	(options, args) = parser.parse_args()

	if (len(args)!=2):
		parser.print_help()
		return 1

	haplo_file = open(args[0], 'r')
	gwas_file  = open(args[1], 'r')

	positions 	= [[0] for i in range(1,23)] 
	hit_alleles 	= [[0] for i in range(1,23)]

	for line in gwas_file:
		values = line.split()
		positions[int(values[0]) - 1].append(int(values[1]))
		hit_alleles[int(values[0]) - 1].append(values[2].strip())
		
	gwas_file.close()

	# allocate memory
	values, autosome, type_variant, pos, length, ref, alt, n, allele_freq, haplotypes, allele = [], 0, '*', 0, 0, '.', '.', 0, 0.0, [], '.'

	for line in haplo_file:
		values = line.split()
		autosome = int(values[0]) 
		type_variant = values[1].strip()
		pos = int(values[2])
		length = values[3].strip()
		ref = values[4].strip()
		alt = values[5].strip()
		n = int(values[6])
		allele_freq = float(values[7])
		haplotypes = values[8].strip()
		allele = '.'

		if pos in positions[autosome - 1]: # hit SNP
			# process hit SNP
			i = positions[autosome - 1].index(pos)
			allele = hit_alleles[autosome - 1][i]
			type_variant = '!'						
		
		if options.hit_snps and type_variant != '!':
			continue

		print('%d %c %d '%(autosome, type_variant, pos), end='')
		print(length, ref, alt, n, allele_freq, haplotypes, allele)

		
	
if __name__ == '__main__':
	sys.exit(main())

